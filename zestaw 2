#include <iostream>
using namespace std;

struct Element
{
    string name;
    Element *next;
};

struct List
{
    Element *head;
    int length;
    List()
    {
        this->head=NULL;
        this->length=0;
    }
};

List list;

void add(Element *e)
{
    if(length==0)
    {
        head=e;
    }
    else
    {
        Element *element=head;
        while(element->next!=NULL)
        element=element->next;
        element->next=e;
    }
    length++;
}

bool contain(const string &name)
{
    Element *element=head;
    while(element!=NULL)
    {
        if(element->name==name)
        return true;
        element=element->next;
    }
    return false;
}

bool isEmpty()
{
    return size==0;
}

int size()
{
    return size() const;
}

bool remove(const string& Name)
{
    if(isEmpty())
    {
        return false;
    }

    Element* temp=head;
    bool found=false;
    if(temp->name==Name)
    {
        head=temp->next;
        delete temp;
        size--;
        return true;
    }
    while(temp)
    {
        if(temp->next!=NULL && temp->next->name==Name)
        {
            found=true;
            break;
        }
        temp=temp->next;
    }
    if(found)
    {
        Element* element=temp->next;
        temp->next=temp->next->next;
        delete element;
        size--;
        return found;
    }
    else
    {
        return false;
    }
}

void reverse()
    {
       Element* temp=head;
        Element *prev=NULL, *next=NULL;
        
 
        while (temp!=NULL) {
            next=temp->next;
            temp->next = prev;
            prev=temp;
            temp=next;
        }
        head=prev;
    }

void toarr(string arr[])
{
    int temp = 0;
    Element element = head;
    while(element!=NULL)
    {
         element=element->next;
         arr[temp++]=element->name;
        
    }
}

void removeRep()
{
   Element *temp=head;
   Element *temp2, *rep;
   while(temp!=NULL && temp->next!=NULL)
    {
        temp2=temp;
        while(temp2->next!=NULL)
        {
            if(temp->name==temp2->next->name)
            {
                rep=temp2->next;
                temp2->next=temp2->next->next;
            }
            else
            {
                temp2=temp2->next;
            }
        }
        temp=temp->next;
    }
}
}
}
